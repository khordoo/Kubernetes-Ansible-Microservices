# Use the latest 2.1 version.. of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:   
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "capstone-<<parameters.workflow_id>>" 
 
jobs:
  lint:
    docker:
      - image: python:3.9-alpine
    steps:
      - checkout 
      - run:
          name: "Install dependencies" 
          command: |
            pip3 install -r requirements.txt
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            chmod +x /bin/hadolint
      - run:
          name: "lint"
          command: |  
            hadolint Dockerfile --ignore DL3013
            pylint --disable=R,C,W1203 app.py

  build-publish-docker-image:
    environment:
      IMAGE_NAME: mkhordoo/capstone
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - checkout 
      - setup_remote_docker
      - run:
          name: "Build Image" 
          command: |
            docker --version
            docker build -t $IMAGE_NAME:latest . 
      
      - run:
          name: "Publish latest to docker hub" 
          command: |
            docker login -u $DOCKERHUB_USERNAME -p $DOCKER_HUB_PASSWORD
            docker  push $IMAGE_NAME:latest
  
  create-master-node:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: "Install dependencies" 
          command: |    
              yum install tar gzip -y 
      - run:
          name: "Deploy cloudformation stack" 
          command: |             
            aws cloudformation deploy \
              --stack-name capstone-${CIRCLE_WORKFLOW_ID} \
              --template-file files/cluster.yaml \
              --tags Project=Capstone \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
      - run:
          name: "Add back-end ip to ansible inventory"
          command: |
            INSTANCE_PUBLIC_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --output=text )   
            echo $INSTANCE_PUBLIC_IP
            echo "[all]" > .circleci/inventory.txt
            echo "${INSTANCE_PUBLIC_IP}" >> .circleci/inventory.txt
            cat .circleci/inventory.txt 
           
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID} 

  configure-master-node:
    docker:
      - image: lexauw/ansible-alpine
    steps:
      - checkout 
      - add_ssh_keys:
          fingerprints: ["a5:c1:42:5d:4b:2c:12:c8:75:66:63:b5:75:77:2b:20"]
      - attach_workspace:
          at: ~/
      - run:
          name: "Config by Ansible"
          command: |   
              export ANSIBLE_HOST_KEY_CHECKING=False 
              ansible-playbook -i .circleci/inventory.txt .circleci/ansible/configure-node.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID} 
  
  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install tar gzip -y
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            API_URL=http://$(tail -1 .circleci/inventory.txt)
            echo $API_URL
            if curl -s ${API_URL} --connect-timeout 5
            then
              exit 0
            else 
              exit 1 
            fi 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}    
  
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: cleanup 
          command: |
            OLD_WORKFLOW_ID=$(aws cloudformation list-exports --query="Exports[?Name>'WorkflowId'].Value| [1]" | tr -d '"')  
            echo old worflow id is:"${OLD_WORKFLOW_ID}"
            STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            if [[ "${STACKS[@]}" =~ "${OLD_WORKFLOW_ID}" ]]
            then
              aws cloudformation delete-stack --stack-name capstone-${OLD_WORKFLOW_ID} 
            fi
     
workflows:
  kubernetese:
    jobs:
      - lint
      - build-publish-docker-image:
          requires: [lint]
      - create-master-node:
          requires: [build-publish-docker-image]
      - configure-master-node:
          requires: [create-master-node]
      - smoke-test:
          requires: [configure-master-node] 
      - cleanup:
          requires: [smoke-test]    
